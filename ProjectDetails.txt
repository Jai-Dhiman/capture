# Project Vision:
Redefining Social Media with Privacy & Safety in Mind

Capture, was created to incorporate a user-friendly interface that simplified the best aspects of every day social media apps. Removing the features and algorithms in current social media applications that are a risk to a users privacy and safety.

Problem Statement

Current social media platforms often compromise user privacy and safety through invasive algorithms, data tracking, and harmful features. Capture was designed to simplify the best aspects of social media while removing risks to privacy and mental well-being.

Objectives & Goals

    Objective: Create a user-friendly social media app that prioritizes privacy, safety, and mental well-being while maintaining the engaging features users love.

    Goal: Redefine the social media experience by eliminating harmful, addictive algorithms and fostering a secure, supportive, and customizable platform.

User Needs

    Users need a social media platform that prioritizes their privacy and does not exploit their data for profit.

    Users want an interface that is easy to navigate and enhances positive social interactions without the risk of harmful content.

    Users require tools to control their experience, such as customizable feeds and filters to avoid overwhelming or triggering content.

Root Cause Analysis

Core Problem: Existing social media platforms prioritize profit through invasive algorithms and data tracking, leading to compromised user privacy and well-being.

Contributing Factors:

    Algorithms designed to maximize engagement often promote harmful or addictive content.

    Monetization strategies rely heavily on user data, creating privacy concerns.

    Limited user control over content and interactions exacerbates mental health risks.

Solution:

    Develop a social media app that removes invasive algorithms and data tracking.

    Incorporate customizable features that allow users to control their experience, such as chronological feeds and content filters.

    Ensure privacy and safety through robust security measures and transparent policies.

    Tech Stack:

### Frontend:
- React Native + Expo
- TypeScript
- React Navigation
- React Query
- Zustand 
- React Native Reanimated

### Backend/Infrastructure:
- Cloudflare Workers
  - Hono
  - Drizzle ORM for type-safe D1 queries
  - D1 Sqlite Database
  - R2 for file storage
  - Durable Objects for real-time/websockets
  - KV for caching
  - WebPush API through Workers for notifications
  - Workers AI for content moderation
  - Qdrant Vector DB for 'similar content' recommendations (maybe try neon vector first)


### Development Tools:
- pnpm
- Turborepo 
- Vitest
- GitHub Actions
- Wrangler for Workers development
- Mix of RESTful API's and Graph QL

### Security/Messaging:
- Signal Protocol (E2E encrypted DMs)
- TweetNaCl.js (crypto)
- Zod for runtime type validation

### Image Processing:
- Workers Image Resizing API
- Cloudflare Images for optimization and delivery

#Zod Validation/Type Schema:
import { z } from 'zod'

export const profileSchema = z.object({
  id: z.string(),
  username: z.string(),
  email: z.string().email(),
  phoneNumber: z.string().nullable().optional(),
  image: z.string().nullable().optional(),
  bio: z.string().nullable().optional(),
  verifiedType: z.string().default('none'),
  createdAt: z.date(),
  updatedAt: z.date(),
})

export const postSchema = z.object({
  id: z.string(),
  userId: z.string().nullable().optional(),
  content: z.string(),
  createdAt: z.date(),
})

export const mediaSchema = z.object({
  id: z.string(),
  userId: z.string().nullable().optional(),
  postId: z.string().nullable().optional(),
  type: z.string(),
  url: z.string(),
  thumbnailUrl: z.string().nullable().optional(),
  order: z.number(),
  createdAt: z.date(),
})

export const commentSchema = z.object({
  id: z.string(),
  postId: z.string().nullable().optional(),
  userId: z.string().nullable().optional(),
  content: z.string(),
  parentCommentId: z.string().nullable().optional(),
  createdAt: z.date(),
})

export const savedPostSchema = z.object({
  id: z.string(),
  userId: z.string().nullable().optional(),
  postId: z.string().nullable().optional(),
  createdAt: z.date(),
})

export const captagSchema = z.object({
  id: z.string(),
  name: z.string(),
  createdAt: z.date(),
})

export const postCaptagSchema = z.object({
  postId: z.string().nullable().optional(),
  captagId: z.string().nullable().optional(),
  createdAt: z.date(),
})

export const relationshipSchema = z.object({
  id: z.string(),
  followerId: z.string().nullable().optional(),
  followedId: z.string().nullable().optional(),
  createdAt: z.date(),
})

export type Profile = z.infer<typeof profileSchema>
export type Post = z.infer<typeof postSchema>
export type Media = z.infer<typeof mediaSchema>
export type Comment = z.infer<typeof commentSchema>
export type SavedPost = z.infer<typeof savedPostSchema>
export type Captag = z.infer<typeof captagSchema>
export type PostCaptag = z.infer<typeof postCaptagSchema>
export type Relationship = z.infer<typeof relationshipSchema>

# API Route Reference:
## REST API Routes

// REST API Routes

// Profile Routes (REST)
app.get('/api/profile/:userId')
app.put('/api/profile')
app.put('/api/profile/settings')

// Media Routes (REST)
app.post('/api/media/upload')
app.delete('/api/media/:mediaId')

// Post Routes (REST)
app.post('/api/posts')
app.get('/api/posts/:postId')
app.delete('/api/posts/:postId')
app.post('/api/posts/:postId/save')
app.delete('/api/posts/:postId/save')

// Comment Routes (REST)
app.post('/api/posts/:postId/comments')
app.get('/api/posts/:postId/comments')
app.post('/api/comments/:commentId/replies')
app.delete('/api/comments/:commentId')

// Relationship Routes (REST)
app.post('/api/relationships/follow/:userId')
app.delete('/api/relationships/unfollow/:userId')
app.get('/api/relationships/followers/:userId')
app.get('/api/relationships/following/:userId')

// Captag Routes (REST)
app.get('/api/captags/search')
app.get('/api/captags/:name/posts')

// GraphQL Schema
const typeDefs = `
  type Query {
    feed(limit: Int, offset: Int): [Post!]!
    post(id: ID!): Post
    profile(id: ID!): Profile
    searchCaptags(query: String!): [Captag!]!
    searchUsers(query: String!): [Profile!]!
    comments(postId: ID!, limit: Int, offset: Int): [Comment!]!
  }

  type Mutation {
    createPost(input: PostInput!): Post!
    createComment(input: CommentInput!): Comment!
    updatePost(id: ID!, input: PostInput!): Post!
    updateProfile(input: ProfileInput!): Profile!
  }

  type Subscription {
    newComment(postId: ID!): Comment!
    newPost(userId: ID!): Post!
  }

  type Profile {
    id: ID!
    username: String!
    email: String!
    phoneNumber: String
    image: String
    bio: String
    verifiedType: String!
    posts: [Post!]!
    followers: [Profile!]!
    following: [Profile!]!
    createdAt: String!
    updatedAt: String!
  }

  type Post {
    id: ID!
    content: String!
    user: Profile!
    media: [Media!]!
    comments: [Comment!]!
    captags: [Captag!]!
    savedBy: [Profile!]!
    createdAt: String!
  }

  type Comment {
    id: ID!
    content: String!
    user: Profile!
    post: Post!
    parentComment: Comment
    replies: [Comment!]!
    createdAt: String!
  }

  type Media {
    id: ID!
    type: String!
    url: String!
    thumbnailUrl: String
    order: Int!
    createdAt: String!
  }

  type Captag {
    id: ID!
    name: String!
    posts: [Post!]!
    createdAt: String!
  }

  input PostInput {
    content: String!
    mediaIds: [ID!]
    captagIds: [ID!]
  }

  input CommentInput {
    postId: ID!
    content: String!
    parentCommentId: ID
  }

  input ProfileInput {
    username: String
    bio: String
    image: String
    phoneNumber: String
  }
`

# Frontend Assets:
~/Documents/capture/apps/mobile/src/assets % ls -R
Fluid Background Coffee.png
icons/

./icons:
Back Icon.svg
Block Icon.svg
Cancel Icon.svg
Dont Show Passoword Icon.svg
Email Icon.svg
Favorites Icon.svg
Lock Icon 2.svg
Lock Icon.svg
Notification Icon.svg
Plus Icon.svg
Profile Icon.svg
Question Icon.svg
Search Icon.svg
Settings Icon.svg
View Password Icon.svg
apple.svg
google.svg
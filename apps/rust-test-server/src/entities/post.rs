//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "post")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    #[sea_orm(column_type = "Text")]
    pub user_id: String,
    #[sea_orm(column_type = "Text")]
    pub content: String,
    #[sea_orm(column_type = "Text")]
    pub r#type: String,
    #[sea_orm(column_type = "custom(\"numeric\")")]
    pub created_at: String,
    #[sea_orm(column_name = "_save_count")]
    pub save_count: i32,
    #[sea_orm(column_name = "_comment_count")]
    pub comment_count: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::comment::Entity")]
    Comment,
    #[sea_orm(has_many = "super::media::Entity")]
    Media,
    #[sea_orm(has_many = "super::post_hashtag::Entity")]
    PostHashtag,
    #[sea_orm(has_many = "super::post_like::Entity")]
    PostLike,
    #[sea_orm(has_many = "super::saved_posts::Entity")]
    SavedPosts,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::comment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Comment.def()
    }
}

impl Related<super::media::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Media.def()
    }
}

impl Related<super::post_hashtag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostHashtag.def()
    }
}

impl Related<super::post_like::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostLike.def()
    }
}

impl Related<super::saved_posts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SavedPosts.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

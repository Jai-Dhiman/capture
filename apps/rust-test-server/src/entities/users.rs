//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    #[sea_orm(column_type = "Text", unique)]
    pub email: String,
    pub email_verified: i32,
    #[sea_orm(column_type = "Text", nullable)]
    pub phone: Option<String>,
    pub phone_verified: i32,
    #[sea_orm(column_type = "Text", nullable, unique)]
    pub apple_id: Option<String>,
    #[sea_orm(column_type = "custom(\"numeric\")")]
    pub created_at: String,
    #[sea_orm(column_type = "custom(\"numeric\")")]
    pub updated_at: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::comment::Entity")]
    Comment,
    #[sea_orm(has_many = "super::comment_like::Entity")]
    CommentLike,
    #[sea_orm(has_many = "super::media::Entity")]
    Media,
    #[sea_orm(has_one = "super::notification_settings::Entity")]
    NotificationSettings,
    #[sea_orm(has_many = "super::passkeys::Entity")]
    Passkeys,
    #[sea_orm(has_many = "super::post::Entity")]
    Post,
    #[sea_orm(has_many = "super::post_like::Entity")]
    PostLike,
    #[sea_orm(has_one = "super::profile::Entity")]
    Profile,
    #[sea_orm(has_many = "super::saved_posts::Entity")]
    SavedPosts,
    #[sea_orm(has_many = "super::user_activity::Entity")]
    UserActivity,
}

impl Related<super::comment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Comment.def()
    }
}

impl Related<super::comment_like::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CommentLike.def()
    }
}

impl Related<super::media::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Media.def()
    }
}

impl Related<super::notification_settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NotificationSettings.def()
    }
}

impl Related<super::passkeys::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Passkeys.def()
    }
}

impl Related<super::post::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Post.def()
    }
}

impl Related<super::post_like::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostLike.def()
    }
}

impl Related<super::profile::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Profile.def()
    }
}

impl Related<super::saved_posts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SavedPosts.def()
    }
}

impl Related<super::user_activity::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserActivity.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
